<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My personal space</title>
    <link>https://SimY4.github.io/</link>
    <description>Recent content on My personal space</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://SimY4.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hi there ðŸ‘‹</title>
      <link>https://SimY4.github.io/about/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/about/</guid>
      <description>&lt;p&gt;Father of 2, FP enthusiast, Software Engineer, Geek&lt;/p&gt;&#xA;&lt;div style=&#34;display: flex&#34;&gt;&#xA;  &lt;h2 style=&#34;flex: 20%; padding-right: 10px; font-size: 1.1em; text-align: right&#34;&gt;Currently&lt;/h2&gt;&#xA;  &lt;div style=&#34;flex: 80%; text-align: left; margin-top: 1.2em&#34;&gt;&lt;p&gt;&lt;strong&gt;Principal Software Engineer&lt;/strong&gt;, &lt;a href=&#34;https://www.atlassian.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Atlassian&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Playing solution architect and tech lead roles for the new cloud platform development from inception to production roll out.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div style=&#34;display: flex&#34;&gt;&#xA;  &lt;h2 style=&#34;flex: 20%; padding-right: 10px; font-size: 1.1em; text-align: right&#34;&gt;Specialized in&lt;/h2&gt;&#xA;  &lt;div style=&#34;flex: 80%; text-align: left; margin-top: 1.2em&#34;&gt;&lt;p&gt;Design and architecture using &lt;strong&gt;AWS&lt;/strong&gt; services&lt;/p&gt;&#xA;&lt;p&gt;Proficient with &lt;strong&gt;Languages&lt;/strong&gt; and &lt;strong&gt;Stacks&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;p&gt;Java and Kotlin: &lt;strong&gt;18 years&lt;/strong&gt; Spring Framework&#xA;Javascript and Typescript: &lt;strong&gt;18 years&lt;/strong&gt; AngularJS, React&#xA;Scala: &lt;strong&gt;10 years&lt;/strong&gt; typelevel and ZIO stacks&#xA;Clojure: 1 year,&#xA;Rust 1 year&lt;/p&gt;</description>
    </item>
    <item>
      <title>Avoiding Stringly Typed</title>
      <link>https://SimY4.github.io/posts/005-avoiding-stringly-typed/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/posts/005-avoiding-stringly-typed/</guid>
      <description>&lt;p&gt;Thereâ€™s this saying that you shouldnâ€™t have String as your function input unless you expect three volumes of War and Peace as valid input.&#xA;So unless itâ€™s your case and you want to improve your codebase to be more precise in type signatures, I invite you to discuss one possible option. Iâ€™ll use the following API as our case study:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;EmailSender&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#902000&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#06287e&#34;&gt;sendEmail&lt;/span&gt;(String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;from,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;to,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;subject,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;body);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;thereâ€™s an obvious ambiguity in the type signature here. All of the arguments are of the same type and can be easily misplaced.&#xA;Not to mention that any string is accepted as a valid input that, as it seems, suppose to only be a valid email.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consistency: There and Back Again</title>
      <link>https://SimY4.github.io/posts/004-consistency-there-and-back-again/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/posts/004-consistency-there-and-back-again/</guid>
      <description>&lt;h2 id=&#34;what-is-consistency-token&#34;&gt;&#xA;  What is Consistency token?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-consistency-token&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A consistency token represents the state of a resource or entity at a given point in time. It is opaque to consumers, returned in the &lt;code&gt;ETag&lt;/code&gt; header by data modifying APIs. Consumers may cache some of these tokens in a request-local or short-term cache when coordinating a number of calls to control the consistency they require via a custom &lt;code&gt;Event-Stream-State&lt;/code&gt; request header(s) with the following format (as per standard RFC definition):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Compiling Scala in Gradle project</title>
      <link>https://SimY4.github.io/posts/003-cross-compiling-scala-in-gradle/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/posts/003-cross-compiling-scala-in-gradle/</guid>
      <description>&lt;p&gt;It is quite common and widely spread practice for Scala projects to cross-compile and publish several artifacts for multiple versions of Scala compiler. As a rule, for the purposes of creating several versions of one artifact teams using &lt;a href=&#34;https://www.scala-sbt.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SBT&lt;/a&gt; where this feature is avaiable right out of the box and can be configured in a couple of lines. But what if we want to cross-publish our Scala project the same way without using SBT?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monads Explained</title>
      <link>https://SimY4.github.io/posts/002-monads-explained/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/posts/002-monads-explained/</guid>
      <description>&lt;h2 id=&#34;referential-transparency&#34;&gt;&#xA;  Referential transparency&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#referential-transparency&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Referential transparency is a nice property of pure functional programming languages that allow us to reason about the behaviour of our programs.&#xA;It guarantees that all expressions are always evaluating to the same result in any context. What it gives to the programmer is an ease of equational reasoning about any pure program as they used to do it in math.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Here you are!</title>
      <link>https://SimY4.github.io/posts/001-here-you-are/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://SimY4.github.io/posts/001-here-you-are/</guid>
      <description>&lt;p&gt;Hi, there.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re reading this that means that you&amp;rsquo;ve ended up in my personal blog. Welcome! I&amp;rsquo;ll try to keep it short and interesting for both of us.&lt;/p&gt;&#xA;&lt;p&gt;In the past few years, I&amp;rsquo;ve got fascinated by the topic of pure functional programming. I was lucky enough to see it being applied in real-world projects, I learned a lot from people practising it at their everyday work. And today, I believe I grasped enough knowledge on this topic for me to share it with you as a series of educative blog posts.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
