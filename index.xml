<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My personal space</title>
    <link>https://SimY4.github.io/</link>
    <description>Recent content on My personal space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://SimY4.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Brief introduction to Category theory</title>
      <link>https://SimY4.github.io/posts/005-brief-introduction-to-ct/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://SimY4.github.io/posts/005-brief-introduction-to-ct/</guid>
      <description>Let&amp;rsquo;s briefly talk about Category theory. Category theory is a branch of set theory where the focus was shifted on relationships between sets rather than sets themselves. So, in category theory, we say that all sets are an atomic object that we can&amp;rsquo;t look into and all relationships between sets are arrows that go from one atomic object to another with a few extra rules. First, all objects must have at least one identity arrow id: A -&amp;gt; A that starts and ends on the same object.</description>
    </item>
    
    <item>
      <title>Kleisli composition</title>
      <link>https://SimY4.github.io/posts/004-kleisli-composition/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://SimY4.github.io/posts/004-kleisli-composition/</guid>
      <description>So say, we moved all of our side-effects into a nice exclict effects space, and we ended up having all these boilerplate for unpacking and inspecting the internal state of our effects in order to proceed further:
val maybeUser: Option[User] = getUserById(UserId(1)) val maybeAccountId: Option[AccountId] = maybeUser match { case Some(user) =&amp;gt; getUserAccountId(user) case None =&amp;gt; None } val maybeUserAccount: Option[UserAccount] = maybeAccountId match { case Some(accountId) =&amp;gt; getAccount(accountId) case None =&amp;gt; None } There&amp;rsquo;s a lot of friction here to compose these types together and it&amp;rsquo;s very hard to follow what this code actually intended to do.</description>
    </item>
    
    <item>
      <title>Effects and side-effects</title>
      <link>https://SimY4.github.io/posts/003-effects-and-sideeffects/</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://SimY4.github.io/posts/003-effects-and-sideeffects/</guid>
      <description>So, to satisfy the property of referential transparency we need to keep our code free from any side-effects. One of the ways to achieve this is by lifting all side-effects into an effect. What is an effect in functional programming? Effect is a result of a function that isn&amp;rsquo;t pure. So, what&amp;rsquo;s a pure function then? A pure function is a function where the return value is determined only by its input arguments.</description>
    </item>
    
    <item>
      <title>Referential transparency</title>
      <link>https://SimY4.github.io/posts/002-referential-transparency/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://SimY4.github.io/posts/002-referential-transparency/</guid>
      <description>Referential transparency is a nice property of pure functional programming languages that allow us to reason about the behaviour of our programs. It means that an expression always evaluates to the same result in any context. What it gives us is the ease of equational reasoning about our programs as we used to do in math.
2 + (2 * 2) === 2 + 4 === 6 &amp;#34;Hello&amp;#34; + &amp;#34; &amp;#34; + &amp;#34;world&amp;#34; === &amp;#34;Hello &amp;#34; + &amp;#34;world&amp;#34; === &amp;#34;Hello&amp;#34; + &amp;#34; world&amp;#34; === &amp;#34;Hello world&amp;#34; List(1, 2, 3) ++ List(4, 5, 6) === List(1, 2, 3, 4, 5, 6) g(f(a)) === (g compose f)(a) If you think about it, most of the modern compilers (non-FP included) can already do some optimisations for referentially transparent code fragments.</description>
    </item>
    
    <item>
      <title>Here you are!</title>
      <link>https://SimY4.github.io/posts/001-here-you-are/</link>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://SimY4.github.io/posts/001-here-you-are/</guid>
      <description>Hi, there.
If you&amp;rsquo;re reading this that means that you&amp;rsquo;ve ended up in my personal blog. Welcome! I&amp;rsquo;ll try to keep it short and interesting for both of us.
In the past few years, I&amp;rsquo;ve got fascinated by the topic of pure functional programming. I was lucky enough to see it being applied in real-world projects, I learned a lot from people practising it at their everyday work. And today, I believe I grasped enough knowledge on this topic for me to share it with you as a series of educative blog posts.</description>
    </item>
    
  </channel>
</rss>